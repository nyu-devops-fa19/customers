# Copyright 2016, 2019 John J. Rofrano. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Paths:
------
GET /customers - returns a list all of the Customers
GET /customers/{user_id} - returns the Customer with a given user_id
POST /customers - creates a new Customer record in the database
PUT /customers/{user_id} - updates a Customer record in the database
DELETE /customers/{user_id} - deletes a Customer record in the database
PUT /customers/{user_id}/deactivate - deactivates a Customer record in the database
PUT /customers/{user_id}/activate - activates a Customer record in the database
"""

import os
import sys
import uuid
import logging
import atexit
from flask import Flask, jsonify, request, url_for, make_response, abort
from flask_api import status    # HTTP Status Codes
from flask_restplus import Api, Resource, fields, reqparse, inputs
from werkzeug.exceptions import NotFound
import uuid
from functools import wraps
from flask_restplus import Api, Resource, fields, reqparse, inputs

# For this example we'll use SQLAlchemy, a popular ORM that supports a
# variety of backends including SQLite, MySQL, and PostgreSQL
from flask_sqlalchemy import SQLAlchemy
from service.models import Customer, DataValidationError, Address

# Import Flask application
from . import app

# Document the type of autorization required
authorizations = {
    'apikey': {
        'type': 'apiKey',
        'in': 'header',
        'name': 'X-Api-Key'
    }
}

######################################################################
# GET INDEX
######################################################################
@app.route('/')
def index():
    return app.send_static_file('index.html')

######################################################################
# Configure Swagger before initilaizing it
######################################################################
api = Api(app,
          version='1.0.0',
          title='Customer REST API Service',
          description='This is Customer server.',
          default='customers',
          default_label='Customer operations',
          doc='/apidocs/',

          authorizations=authorizations
         )

# Define the model so that the docs reflect what can be sent
customer_model = api.model('Customer', {
    'customer_id': fields.String(required=True, description='The unique customer id generated by the system'),
    'user_id': fields.String(required=True,
                             description='The unique id given by customer'),
    'first_name': fields.String(required=True,
                                description='The first name of the Customer'),
    'last_name': fields.String(required=True,
                               description='The last name of Customer (e.g., Wang, Gates, etc.)'),
    'password': fields.String(required=True,
                              description='Password'),
    'active': fields.Boolean(required=True,
                              description='Active status'),
    'address': fields.Nested(
        api.model('Address', {
            'id': fields.String(required=True, description='The unique address id generated by the system'),
            'street': fields.String(required=True, description='Street'),
            'apartment': fields.String(required=True, description='Apartment'),
            'city': fields.String(required=True, description='City'),
            'state': fields.String(required=True, description='State'),
            'zip_code': fields.String(required=True, description='Zip code')
        }),
        description='Address of the customer'
    )
})

create_model = api.model('Customer', {
    'user_id': fields.String(required=True,
                             description='The unique id given by customer'),
    'first_name': fields.String(required=True,
                                description='The first name of the Customer'),
    'last_name': fields.String(required=True,
                               description='The last name of Customer (e.g., Wang, Gates, etc.)'),
    'password': fields.String(required=True,
                              description='Password'),
    'address': fields.Nested(
        api.model('Address', {
            'street': fields.String(required=True, description='Street'),
            'apartment': fields.String(required=True, description='Apartment'),
            'city': fields.String(required=True, description='City'),
            'state': fields.String(required=True, description='State'),
            'zip_code': fields.String(required=True, description='Zip code')
        }),
        description='Address of the customer'
    )
})

# query string
customer_args = reqparse.RequestParser()
customer_args.add_argument('fname', type=str, required=False, help='List Customers by first name')
customer_args.add_argument('lname', type=str, required=False, help='List Customers by last name')
customer_args.add_argument('street', type=str, required=False, help='List Customers by street')
customer_args.add_argument('city', type=str, required=False, help='List Customers by city')
customer_args.add_argument('state', type=str, required=False, help='List Customers by state')
customer_args.add_argument('zip_code', type=str, required=False, help='List Customers by zip code')

######################################################################
# Error Handlers
######################################################################
@api.errorhandler(DataValidationError)
def request_validation_error(error):
    """ Handles Value Errors from bad data """
    message = str(error)
    app.logger.warning(message)
    return {
        'status_code': status.HTTP_400_BAD_REQUEST,
        'error': 'Bad Request',
        'message': message
    }, status.HTTP_400_BAD_REQUEST

@app.errorhandler(status.HTTP_400_BAD_REQUEST)
def bad_request(error):
    """ Handles bad reuests with 400_BAD_REQUEST """
    message = str(error)
    app.logger.warning(message)
    return jsonify(status=status.HTTP_400_BAD_REQUEST,
                   error='Bad Request',
                   message=message), status.HTTP_400_BAD_REQUEST

@app.errorhandler(status.HTTP_404_NOT_FOUND)
def not_found(error):
    """ Handles resources not found with 404_NOT_FOUND """
    message = str(error)
    app.logger.warning(message)
    return jsonify(status=status.HTTP_404_NOT_FOUND,
                   error='Not Found',
                   message=message), status.HTTP_404_NOT_FOUND

@app.errorhandler(status.HTTP_405_METHOD_NOT_ALLOWED)
def method_not_supported(error):
    """ Handles unsuppoted HTTP methods with 405_METHOD_NOT_SUPPORTED """
    message = str(error)
    app.logger.warning(message)
    return jsonify(status=status.HTTP_405_METHOD_NOT_ALLOWED,
                   error='Method not Allowed',
                   message=message), status.HTTP_405_METHOD_NOT_ALLOWED

def check_content_type(content_type):
    """ Checks that the media type is correct """
    if request.headers['Content-Type'] == content_type:
        return
    app.logger.error('Invalid Content-Type: %s',
                     request.headers['Content-Type'])
    abort(415, 'Content-Type must be {}'.format(content_type))

@app.errorhandler(status.HTTP_500_INTERNAL_SERVER_ERROR)
def internal_server_error(error):
    """ Handles unexpected server error with 500_SERVER_ERROR """
    message = str(error)
    app.logger.error(message)
    return jsonify(status=status.HTTP_500_INTERNAL_SERVER_ERROR,
                   error='Internal Server Error',
                   message=message), status.HTTP_500_INTERNAL_SERVER_ERROR

######################################################################
# Function to generate a random API key (good for testing)
######################################################################
def generate_apikey():
    """ Helper function used when testing API keys """
    return uuid.uuid4().hex


######################################################################
# GET HEALTH CHECK
######################################################################
@app.route('/healthcheck')
def healthcheck():
    """ Let them know our heart is still beating """
    return make_response(jsonify(status=200, message='Healthy'), status.HTTP_200_OK)

######################################################################
# PATH: /customers
######################################################################

@api.route('/customers', strict_slashes=False)
class CustomerCollection(Resource):
    """ Handles all interactions with collections of Customers """
    #-----------------------------------------------------------------------
    # ADD A NEW CUSTOMER
    #-----------------------------------------------------------------------
    @api.doc('create_customers', security='apikey')
    @api.expect(create_model)
    @api.response(400, 'The posted data was not valid')
    @api.response(201, 'Customer created successfully')
    @api.marshal_with(customer_model, code=201)
    def post(self):
        """
        Creates a Customer
        This endpoint will create a Customer based the data in the body that is posted
        """
        app.logger.info('Request to create a customer')
        check_content_type('application/json')
        cust = Customer()
        cust.deserialize(api.payload)
        cust.save()
        customer_id = cust.customer_id
        addr = Address()
        addr.deserialize(api.payload['address'])
        addr.customer_id = customer_id
        addr.save()
        cust.address_id = addr.id
        cust.save()
        message = cust.serialize()
        location_url = api.url_for(CustomerResource, user_id=cust.user_id, _external=True)
        return message, status.HTTP_201_CREATED, {'Location': location_url}
    #-----------------------------------------------------------------------
    # LIST ALL CUSTOMERS
    #-----------------------------------------------------------------------
    @api.doc('list_customers')
    @api.expect(customer_args, validate=True)
    def get(self):
        """ Returns all of the Customers """
        app.logger.info('Request for customers list...')
        customers = []
        args = customer_args.parse_args()
        if args['fname']:
            app.logger.info('Filtering by first name: %s', args['fname'])
            customers = Customer.find_by_first_name(args['fname'])
        elif args['lname']:
            app.logger.info('Filtering by last name: %s', args['lname'])
            customers = Customer.find_by_last_name(args['lname'])
        elif args['city']:
            app.logger.info('Filtering by city: %s', args['city'])
            customers = Address.find_by_city(args['city'])
        elif args['state']:
            app.logger.info('Filtering by state: %s', args['state'])
            customers = Address.find_by_state(args['state'])
        elif args['zip_code']:
            app.logger.info('Filtering by zip code: %s', args['zip_code'])
            customers = Address.find_by_zip(args['zip_code'])
        else:
            customers = Customer.all()

        results = [cust.serialize() for cust in customers]
        return results, status.HTTP_200_OK

######################################################################
# PATH /customers/{user_id}
######################################################################
@api.route('/customers/<user_id>')
@api.param('user_id', 'The User identifier')
class CustomerResource(Resource):
    """
    CustomerResource class

    Allows the manipulation of a single Customer
    GET /cutsomer{id} - Returns a Customer with the id
    PUT /customer{id} - Update a Customer with the id
    DELETE /customer{id} -  Deletes a Customer with the id
    """
    #------------------------------------------------------------------
    # RETRIEVE A CUSTOMER
    #------------------------------------------------------------------
    @api.doc('get_customer')
    @api.response(404, 'Customer not found')
    @api.marshal_with(customer_model)
    def get(self, user_id):
        """
        Retrieve a single customer
        This endpoint will return a Customer based on user_id
        """
        app.logger.info('Request for customer with user_id: %s', user_id)
        cust = Customer.find(user_id)
        result = [customer.serialize() for customer in cust]
        if len(result) == 0:
            api.abort(status.HTTP_404_NOT_FOUND, "Customer with id '{}' was not found".format(user_id))
        return result, status.HTTP_200_OK

######################################################################
# DELETE A CUSTOMER
######################################################################
# @app.route('/customers/<string:user_id>', methods=['DELETE'])
# def delete_customers(user_id):

#     """
#     Delete a Customer
#     This endpoint will delete a Customer based the id specified in the path
#     """
#     app.logger.info('Request to delete customer with user_id: %s', user_id)
#     customer = Customer.find(user_id)
#     if customer:
#         cust = customer[0]
#         cust.delete()
#     return make_response('', status.HTTP_204_NO_CONTENT)

######################################################################
# UPDATE A CUSTOMER
######################################################################
# @app.route('/customers/<string:user_id>', methods=['PUT'])
# def update_customers(user_id):
#     """
#     Update a Customer
#     This endpoint will update a Customer based the body that is posted
#     """
#     app.logger.info('Request to update customer with id: %s', user_id)
#     check_content_type('application/json')
#     customers = Customer.find(user_id)
#     if customers.count() == 0:
#         raise NotFound("Customer with id '{}' was not found.".format(user_id))

#     cust = customers[0]
#     cust.deserialize(request.get_json())
#     cust.user_id = user_id
#     cust.save()
#     return make_response(jsonify(cust.serialize()), status.HTTP_200_OK)

######################################################################
# PATH: /customers/{user_id}/deactivate
######################################################################
@api.route('/customers/<user_id>/deactivate')
@api.param('user_id', 'Customer identifier')
class DeactivateResource(Resource):
    """ Deactivate action on a Customer """
    @api.doc('deactivate_customer', security='apikey')
    def put(self, user_id):
        """
        Deactivate a Customer
        This endpoint will deactivate a Customer
        """
        app.logger.info('Request to deactivate customer with id: %s', user_id)
        customers = Customer.find(user_id)
        if customers.count() == 0:
            raise NotFound("Customer with id '{}' was not found.".format(user_id))

        cust = customers[0]
        cust.user_id = user_id
        cust.active = False
        cust.save()
        return make_response(jsonify(cust.serialize()), status.HTTP_200_OK)

######################################################################
# PATH: /customers/{user_id}/activate
######################################################################
@api.route('/customers/<user_id>/activate')
@api.param('user_id', 'Customer identifier')
class ActivateResource(Resource):
    """ Activate action on a Customer """
    @api.doc('activate_customer', security='apikey')
    def put(self, user_id):
        """
        Activate a Customer
        This endpoint will activate a Customer
        """
        app.logger.info('Request to activate customer with id: %s', user_id)
        customers = Customer.find(user_id)
        if customers.count() == 0:
            raise NotFound("Customer with id '{}' was not found.".format(user_id))

        cust = customers[0]
        cust.user_id = user_id
        cust.active = True
        cust.save()
        return make_response(jsonify(cust.serialize()), status.HTTP_200_OK)

######################################################################
# DELETE ALL CUSTOMER DATA (for testing only)
######################################################################
@app.route('/customers/reset', methods=['DELETE'])
def customers_reset():
    """ Removes all customers from the database """
    Address.remove_all()
    Customer.remove_all()
    return make_response('', status.HTTP_204_NO_CONTENT)

######################################################################
#  U T I L I T Y   F U N C T I O N S
######################################################################

def init_db():
    """ Initialies the SQLAlchemy app """
    global app
    Customer.init_db(app)

def check_content_type(content_type):
    """ Checks that the media type is correct """
    if request.headers['Content-Type'] == content_type:
        return
    app.logger.error('Invalid Content-Type: %s', request.headers['Content-Type'])
    abort(415, 'Content-Type must be {}'.format(content_type))

def initialize_logging(log_level=logging.INFO):
    """ Initialized the default logging to STDOUT """
    if not app.debug:
        print('Setting up logging...')
        # Set up default logging for submodules to use STDOUT
        # datefmt='%m/%d/%Y %I:%M:%S %p'
        fmt = '[%(asctime)s] %(levelname)s in %(module)s: %(message)s'
        logging.basicConfig(stream=sys.stdout, level=log_level, format=fmt)
        # Make a new log handler that uses STDOUT
        handler = logging.StreamHandler(sys.stdout)
        handler.setFormatter(logging.Formatter(fmt))
        handler.setLevel(log_level)
        # Remove the Flask default handlers and use our own
        handler_list = list(app.logger.handlers)
        for log_handler in handler_list:
            app.logger.removeHandler(log_handler)
        app.logger.addHandler(handler)
        app.logger.setLevel(log_level)
        app.logger.propagate = False
        app.logger.info('Logging handler established')

def disconnect():
    """ disconnect from the database """
    app.logger.info('removing session ...')
    Customer.disconnect()

atexit.register(disconnect)